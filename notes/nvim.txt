`` or '': to move to prev cursor >> most preferred `` apostrophes as they will move
                                    cursor to not the postion but backticks just 
                                    puts it at the start of the line
g; & g, to move back and forward in the list of your previous edit locations


<ctrl>w - cut one word to left


:: >>> : <ctrl>a can be used to increment no helpful in macros

To suspend your running Vim
Ctrl + Z

will suspend the process and get back to your shell

fg
will resume (bring to foreground) your suspended Vim.


to search for the recently closed file type :ls and the one with # gives the answer
to open it type :e#
to open it in new split window: 
    :sp# or :vsp#
to open it in new tab:
    :tabe# or for shorter :tabnew

    you can see that in :reg

to interchange the positions of two split windows <c-w><c-r> - no need to c-r just
<c-w>r is fine

    d for creating a directory

    % for creating a new file

    In explorer mode you can get with issuing a command 
    :Sexplore - to open explore in horizontal split
    :Vexplore - tp open explore in vertical split

save all the tabs and buffers
:wa
save all the tabs and buffers and close them
:xa

to open last closed 10 files 

'0 '1 '2 ... '9

to save a session
:mks my-session.nvim

you can save multiple sessions by changing the session file name 

to overrite a session file
:mks! my-session.nvim

if vim is already running and we need to restore a session
:so (or :source) my-session.nvim

daw    - delete a word
gg     - go to beginning of the file
G      - go to end of file
dd     - delete current line
e      - go to the end of next word
b      - go to beginning of the before word
0      - go to beginning of line'
$      - go to end of line
A      - go to end of line and start appending (insert mode)
I       - insert mode at the first non-blank character of the line
gI: Insert at column 1 of the line.
gi: Insert where insert mode was last stopped.

************** deletion ********

    C: Delete until the end of the line and enter insert mode.
    s: Delete a number of characters and enter insert mode.
    S: Delete a number of line and enter insert mode.

>> 3dk     - deletes 4 lines downward including the current line
4dj     - deletes 5 lines upward including the current line

o       - inser a line below
O       - insert a line above

    to select between brackets go one of brackets and v%
    as % to go to next bracket :)



di"  - delete the data inside the double quotes
da"  - delete date including the double quotes

ci"  - deletes the data within "" and enters into insert mode
ca"  - deleles data including "" and enters into insert mode
its possible for others also like '', <>, (), {}, [], ``

To add 10 empty lines below the cursor in normal mode, type 10o<Esc> or to add them above the cursor type 10O<Esc>.

r	replace a single character (does not use insert mode)
J	join line below to the current one
cc	change (replace) an entire line
cw	change (replace) to the end of word
c$	change (replace) to the end of line
s	delete character at cursor and subsitute text
S	delete line at cursor and substitute text (same as cc)
xp	transpose two letters (delete and paste, technically)
u	undo
.	repeat last command
4.  repeat last command 4 times


g;  - go to last edit location
g,  - comes bast to newest edit 
>> - indent right 
4>>  - indent right 4 times

<< - indent left

make bookmarks using m word and then a letter then press 'letter to go to the bookmark

"alsfdkjal kjs;ldfkj ldfj"

db - deletes words backwards


59G     - move cursor to the desired line
:59 move cursor to desired line here 59

dG     - delete from cursor to the end of file
:w foo.txt - save a newly created file as this name 

source ~/.config/nvim/init.vim - to reload the vim plugins


    Ctrl-y Moves screen up one line
    Ctrl-e Moves screen down one line
    Ctrl-u Moves cursor & screen up ½ page
    Ctrl-d Moves cursor & screen down ½ page
    Ctrl-b Moves screen up one page, cursor to last line
    Ctrl-f Moves screen down one page, cursor to first line

if the file is not staging changes that means it is either having another separate git file 
just delete it and everything is back to normal

:y% - yank or copy all the contents of the file 


>>>> SEARCH AND REPLACE >>>

go to the word and press

* - search for the word the cursor is on (same as /)
    n - search for next occurence
    N - search backwards

# - backward search for word cursor is on (same as ?)

in esc mode so typing commands

/ - search forward
? - search backward
    
    \c - case insensitive
ie; /\cdata
    \C - case sensitive
    \<word\> - search for one word only

to search for /** 
    /\/\*\*



:s/<word to search>/<word to replace>/  - to search and replace a word
:s/<word>/<replace word>/g - replace all occurences in current line
:%s/<word>/<replace>/g - repace all in the entire file **** % *** this indicates a range from first
                        to last line of the file
:s/<word>/<replace>/gc - to confirm each substitution
:s/<word>//g - the replace part is considered empty and all the searches are deleted

The :&& command repeats the last substitution with the same flags. You can supply the additional range(s) to it (and concatenate as many as you like):

:6,10s/<search_string>/<replace_string>/g | 14,18&&

If you have many ranges though, I'd rather use a loop:

:for range in split('6,10 14,18')| exe range 's/<search_string>/<replace_string>/g' | endfor

gi - flag to ignore case sensitivity (\c is also used to ignore case sensitivity)
gI - for case sensitive search 

to substitute all occurrences of ‘foo’ to ‘bar’ in all lines starting from line 3 to line 10 
:3,10s/foo/bar/g

The dot . character indicates the current line and $ - the dollar sign the last line. To substitute ‘foo’ in all lines starting from the current line to the last one:

:.,$s/foo/bar/

For example to substitute each ‘foo’ with ‘bar’ starting from the current line and the four next lines

:.,+4s/foo/bar/g

The substitute command looks for the pattern as a string, not a whole word. If, for example, you were searching for “gnu”, the search find matches where “gnu” is embedded in larger words, such as “cygnus” or “magnum”.

To search for a whole word, type \< to mark the beginning of a word, enter the search pattern, type \> to mark the end of a word:

For example, to search for the word “foo” you would use \<foo\>:

:s/\<foo\>/bar/

>> ctrl + l to clear the search and redraw the screen 

H - move cursor to top of screen
L - move cursor to bottom of screen 

in inser mode,
ctrl-u deletes the current line 
ctrl-w deletes the word before the cursor


% - move cursor to matching parenthesis

**** read and write files ****

:1,10 w outfile	Saves lines 1 to 10 in outfile
:1,10 w >> outfile	Appends lines 1 to 10 to outfile
:r infile	Insert the content of infile
:23r infile	Insert the content of infile under line 23


**** tabs ****
:tabnew - creates a new tab
gt - to move to the next tab in right direction
gT -  "                      in left direction

1gt : to go to tab one,
2gt : to go to tab two,
3gt : to go to tab three,

:tabfirst - show first tab
:tablast  - show last tab
:tabm n - move current tab to nth position(rearrange tab)
eg: tabm 0 will put current tab to the first

:tab ball - puts all open files in tabs
:new abc.txt - edit abc.txt in new window

to customise tabs in nvim 

TabLineSel - is the current (so to say) active tab label.
TabLine - are the labels which are not currently active.
TabLineFill - is the remaining of the tabline where there is no labels (background).


to open a file in the current window when working with a file use 

:vi <file name>
or use this in a new tab to open the file in it

*************** folds ****************
zf{motion}

zf'a - to start a fold from current line to mark a
zf3j - folds current line along with below 3 lines 

za - opens and closes fold (zo -opens fold, zc -closes fold)
zO - opens all folds at the cursor
zM - closes all folds
zR - opens all folds <<<<< 
zm - increases foldlevel by one
zr - decrease foldlevel by one

zd - to delete folds at cursor position (no text deleted only fold markers)
zD - to recursively delete folds at cursor
zE - delete all the folds in your file

to save folds :mkview
when you reload the file, run :loadview >> vim will restore the folds to the 
state the file was in at the time you ran :mkview

:mkview supports multiple revisions of a file's state, so you can give a view
a number and reload later on.
eg: :mkview 2 make a few changes, and then run :loadview 2, it will revert to the previous state of the file as far as folds are concerned. Note that it won’t restore the file itself to the previous state; if you delete 10 lines of text after saving a view, Vim won’t restore those lines when you load an older view using :loadview.

it can be done automatically by adding the 


************** marks *****************

m{lowercase} eg: ma
this sets the mark to a

to go to mark a 
'a

to view marks :marks


ma 	set mark a at current cursor location
'a 	jump to line of mark a (first non-blank character in line)
`a 	jump to position (line and column) of mark a
d'a 	delete from current line to line of mark a
d`a 	delete from current cursor position to position of mark a
c'a 	change text from current line to line of mark a
y`a 	yank text to unnamed buffer from cursor to position of mark a
:marks 	list all the current marks
:marks aB 	list marks a, B


Commands like d'a operate "linewise" and include the start and end lines.
ie: it include full ines
Commands like d`a operate "characterwise" and include the start but not the end character. it include till the cursor postion when the mark was added


]' 	jump to next line with a lowercase mark
[' 	jump to previous line with a lowercase mark
]` 	jump to next lowercase mark
[` 	jump to previous lowercase mark 

    Each file can have mark a – use a lowercase mark to jump within a file.
    There is only one file mark A – use an uppercase mark to jump between files.

    if you set capital the previous marks of other files with A will be removed


to delete marks :delm or delmarks

:delmarks a 	delete mark a
:delmarks a-d 	delete marks a, b, c, d
:delmarks abxy 	delete marks a, b, x, y
:delmarks aA 	delete marks a, A
:delmarks! 	delete all lowercase marks for the current buffer (a-z

