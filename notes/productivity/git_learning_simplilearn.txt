========================================================================
=> git configuration levels 

  --System # git config -system 
            saves to : /etc/gitconfig

  --global # git config -global 
            saves to : ~/.gitconfig (on windows it will be Users/...)

  --local # git config -local (Or just # git config) 
            saves to : .git/config 

Local overrides Global override System level 

The following settings needs to be configured for all commits otherwise
git will give a error 

1) user.name 
2) user.email


# git config â€“-global user.name/email "<user name or email>" 
# git commit -m "initial version" 

***********************************************
# git config --global core.editor "code --wait" 
***********************************************

# git config --global color .ui "auto"

# git config --list 

we didn't configure username and email at system level type to check 
# git config --system username 

User settings in Git are mainly defined at Global Level because they 
correspond to user level settings for all repositories 


=======================================================================

Creating a empty directory : # mkdir <file name>
#source destination  cd myproject dir

# ls -ls

convert the directory into repository : 
# git init
# ls -lrt 

contents of the hidden directory : # ls -la

status of the repositoy : # git status

create and initialize a directory at the same 
time                                        : # git init <file name> 
source destination
 
# git init command creates a hidden directory that stores all the
metadata required for it to function



untracted file 
    |                                               local repository

working directory  -->  staging area                          ^ 
                            |                  commited to    | 
                            .git/indexfile -------------------|
                                            # git commit




working    ---> 1. Drop a file into the directory   --> staging area
directory       2. Add the file using # git add             |
                    command                             tracked and 
                                                    ready to commit


while committing, it is important to add a message string using the 
-m flag. If missed, a default editor opens asking for comments
 
# git log : view the changes in a file
    shows   commit id
            author
            date
            commit message

to restrict the output to one-line, execute: # git log --oneliner.
This will display the information in a single line

add new file : # touch <file name>

echo "<html>    </html>" >> index.html

# git commit -m ""

git add to stage the file then commit


=========================================================================

Tracking is the ability to identify changes betwoon the different versions
of the same file, spread across various repositories


# git diff --staged   is similar to   # git diff HEAD

                                                       commit4 --> HEAD~3
            # git diff                                 commit3 --> HEAD~2
        ----------------------      # git commit       commit2 --> HEAD~1
        |                     |         |              commit1 --> HEAD    
working directory -----> staging area -----> local repository
                    |          |                    |
               # git add        ---------------------- 
                                # git diff --staged


if the number of commits increase beyond a certain count, use the 
hashcode command : # git diff <commit hashcode>

# git diff : git indicates changes in the form of additions through the + 
sign and deletions through through - sign

# git diff --staged HEAD : gives the changes in the last commit
# git diff --staged HEAD~1 : " 2nd last commit 
...

each commit has a unique code to refer to a particular commit 


=========================================================================

=> Revert to earlier commits in git

# git log : list details of the commit associated with a file
# git checkout <HEAD~n or commit id> file name : stage the file 
# git status : share the command to unstage the file
# git reset : Remove the file from the staging area 


Use the git rebase -i HEAD~n command to display a list of the 
last n commits in your default text editor.

# Displays a list of the last 3 commits on the current branch
# git rebase -i HEAD~3

# git commit --amend : to change the latest commit message 


==========================================================================


=> delete files in git

# git rm <filename> : deletes the file from the staging area and working 
                      directory 
# git rm --cached <filename> : delete file only from the staging area 

This file will be untracked as it is removed from the staging area 


=> Restoring deleted file 

# git checkout <version> <filename> 

********************************************************
# git ls-files --stage : check the files that are staged 

# ls -lrt : check files in the working directory 
*********************************************************

untracked :- as the file is not staged only present in the working 
             working directory 

=======================================================================

=> how to ignore files in git 

To ignore add the file to .gitignore -> stores file name 
                                     -> stores file pattern 

The file name and file pattern can be overridden using if flag 

~> when we commit files that are added in ignore list git sends a 
warning and lists -f option in the output 


code .gitignore : create a new git ignore file to ignore the file types 
touch c.txt 
and we modify b.txt which is already staged and commited then git will
only tracked b.txt modifications and not new file c.txt created as it 
will be in the ignore list 

to add c.txt file also you need to include -f flag forcing to add 

# git add -f c.txt 

ie; git ignored files will not be staged directly by the git add command 
but we will have to force add then only will git start tracking the file 
and its modifications 


=========================================================================

=> Rename files in git 


# git mv <filename> <new-filename> 
# git add && git commit -m "" 
# git status 


=> use of mv linux command 

1) used to rename files 
# mv <oldfile.txt> <newfile.txt> 

2) used to move a group of files to a different directory 
# mv <file name> <source destination> 

3) to move directories 
# mv dir1 dir2 : if dir2 exists command will move dir1 inside dir2 
                 if dir2 doesn't exist, dir1 will be renamed to dir2 

4) move multiple files and directories 
# mv file1 file2 dir1 

5) mv command also allows you to use pattern matching. eg; to move all 
pdf files from the current directory to the ~/Documents directory,

# mv *.pdf ~/Documents 

========================================================================


GITHUB 
******

~ web-based Git repository hosting service 
~ web interface to upload files 

~ it copies the entire commit history from the local to remote repository 

~    local                      Remote 
    repository                 repository 

    c1                          c1 
    c2        ------->          c2
    c3                          c3 
    c4                          c4

    |                           |
 ********                     ******      
  MASTER                      ORIGIN
 ********                     ******

~ github also helps in publishing projects and collaboration 

~ WATCH: allows you to watch over the changes to this particular 
        directory 
~ STAR: to give ratings

~ FORK: you can fork out a snapshot based on the latest snapshot 
        in this particular repository and you can continue to work on 
        them individually.


=====================================================================

create repository in github using HTTPS  

create a new repository 
create symbolic link to github 
push from local repository to github  

# git push origin master :::push to origin (remote) from master (local) 

# git remote set-url origin https://github.com/vbaswin/VS_Work_done_chumma_git.git
change the url if mistake happened 

======================================================================

create a repository in github using SSH


ensure the local repository is ready 
create an SSH Key (ssh-keygen) 
# ssh-
Configure GitHub with SSH public key 
Create a GitHub Repository 
Push from local repository to GitHub 

- SSH key helps you create a repository without a username and password


=======================================================================

pull commits from remote to local 

# git pull origin master 

=======================================================================

***********************************************************************
if you accedently deleted a repo from local rep but it is present in 
remote then just clone the git repo to the file we want and it becomes 
local rep - it's just plane simple
***********************************************************************

=======================================================================

managing multiple commits to a file:  (different actions at diff lines )

simultaneous changes to the same file in local and remote, 
it gets 
rejected when pushed.
so we need to pull the changes from remote to local where git will
merge the changes 
Then push the changes to remote to see it there. 

=====================================================================

Merging file changes in git: (editing same line differently)


if user A modify line in file in local and user B modifies the same 
line in the same file in the remote repo.
He cannot push because it gets rejected so he is suggested to pull, 
gets a conflict.

To resolve conflicts manually, use git merge command.

Automatic merge failed; he has to do it manually 

when we do 

# code filename 

it shows both changes in the local and remote we need to manually 
choose which one to retain 

now push the file.

======================================================================

in GitHub, "issues" acts as a place where you can raise BUGS and track 
them. 

=======================================================================


GIT BRANCHES

separate workspace created to test something without impacting the 
main code base 

also used for 

* manage release 
* create hotfixes to the production branches 

Master branch: which is created by default when a repo is initialed 
                using the git init command

let c1, c2, c3 be the commit associated with master branch 

creatd "my branch" which will have the snapshot of master branch, all its 
files and commit history 

this new branch refer to new working directory and staging area 
which is different from the master branch desired change can be made to 
this branch and later merged to the master branch. 

=> branch is a method of requesting a new working directory and staging 
   area where a different line of code can be executed. Later this can be 
   merged to the main code base. 

=> a git branch is just a pointer to the commits; it does not change the 
   contents of the repository. it lets you create, list, switch and merge 
   branches 


# git branch <branch name>  : create a new branch 
# git branch                : lists all branches in the current directory 
# git checkout <branch name>: switch to branches 
# git merge <branch name>   : merges branches 

to create a new branch and switch to it, execute:
# git checkout -b <branch name>

* master : an asterisk usually represents an active branch.  

create and switch to a new branch 
******************************* 
# git checkout -b <branch name> 
*******************************

the commits made in new branches will not be present in the master branch

=========================================================================

merging branches 

analyse the difference  ---> prevent conflicts 
        |
    # git diff 

git gui tool which shows a pictorial representation of the different 
branches => comes in handy when there are multiple users working across
multiple branches.

switch to the branch you want to merge 

execute: # git merge <branch name>

# git log --oneline --decorate --graph : shows the commits made in the 
graph visual way in the terminal. 

# git diff master..feature-one 

*** you need to be in the repository where you want the merge to be *** 

# git merge feature-one (note: we are in master)


========================================================================

DETACHED HEAD 

It happened when I used # git checkout <commit id> <filename> 
without entering the file name 

========================================================================

FAST FORWARD MERGE 

Fast forward merge is employed when you merge into a branch, the latest 
commit of which is your parent ie; there is no change in the master branch
and only change is in the feature branch which is build on top of master 
branch. 

A ---> B   -- master branch 
        \
         C
          \
           D -- feature branch (sub branch any name)

# git merge => here git moves the master label to the latest commit 
                brought from the branch.

This method used when 

* Hotfix is needed over the production code base => Used to fix bugs 

=======================================================================

RECURSIVE MERGE 

A ---> B ---> E 
        \
         C 
          \
           D 

default merge of the git to merge multiple bases 

git creates a merge base and merges recursively 

=> recursive merge is done when you have a branch in the master,
which is not the parent of your branch commit. (here it is E)

* when you try to merge, Git realizes that there is a new commit in the 
master branch, which is not the parent of C and D. 

* So, git creates another commit called F and brings all the changes into 
this additional commit. 


  A -> B -> E -> F
        \      /
         C    / 
          \  /
           D 

==========================================================================

Resolving merge conflicts across branches under different conditions 

like we done before, the conflict will be shown when we open the file 
to which differnt changes are done differently at different branches. 

=========================================================================

STASHING ACROSS BRANCHES 

Revert to the last command without interrupting the current work 

# git stash 

it record the current status of the working directory and the staging 
area and reverts to a clean working directory. 

these stash snapshots can be viewed by 
# git stash list 

revert to saved snapshots and continue from there  done using 
# git stash apply 
# git stash pop command 

only diff is when use pop command, removes the stash snapshot from the 
stash list.

cat file (int another branch)

A : fixed INC001                            - line 1 commited
B : fixed INC002                            - line 2 commited 
Assigned INC003  --- WIP (work that needs to be completed) - line 3 
                                waiting for tracking 

when you are doing some work in the feature or another branch and want to 
move to master branch 
# git checkout master 

but shows error because you have not commited the changes you have made 
before switching branches 

so either commit or stash 

# git stash save "B : stashing away work on INC003"

# git stash list 

The messages added during stashing can help in differentiating  the 
stashes. 

# git stash apply (do this in which branch you saved the stash snapshot
                    earlier)

then change the unassigned line to B finished that's it :) 

now go to master branch and stash apply it will show conflict so we need 
to manually update the file and keep the changed we need. (if the same 
file is changed differently in the two branches) 

How to delete the saved stash 

first 
# git stash show : which will display the number of files involved 
in this stash and the lines updated. 


once you are done with applying the snapshot everywhere, execute
# git stash clear 

========================================================================

REBASING IN GIT 

collaboration is essetial in a development environment 

Rebasing is the process of moving a branch to a different commit.  

          master       feature 
            |            /
A --> B --> D --> C --> E 

we are doing this in a different branch 

                        master 
                         / 
A --> B --> E --> F --> G 
       \               /
        C --> D ------    <-- feature

we need the D latest commit 
of master branch to this then 

# git rebase master : rebase the current branch to th latest commit in 
master 

ie; took the commit from D and merged it to new commit G and it became 
the master 

=======================================================================

Rebase vs Merge 

git rebase and git merge integrate changes across branches. 
ie; they solve the same problem differently 

        master            by user 1
                           / 
(A <-- B <-- C <-- D )<-- E
                    \
                     F  
                      \
                     by user 2
                        

git merge 

(A <-- B <-- C <-- D )<-- M 

combines E and F to M 
* here the history is confusing 

git rebase 
                    
                        
(A <-- B <-- C <-- D )<-- E 
                           \
                            R 

it has the same contents as M in merge and F vanishes thus creating a 
clean and straight history 
contents of are stored in R  

Never use "git rebase" on public branches 

# git checkout - : gives the earlier branch 

=========================================================================

CLONING 

Cloning helps in creating a copy of the repository and links it to the 
original repository to facilitate working collaboratly 

-> copy the working directory 
-> clone the original directory 

clone takes two arguments <URL of the original repo> and <destination dir>


            is in sync with 
Duplicate ------------------> original repository 

=> "-" this symbol after any command shows last 
because cd - brings back the last directory we where in 


cloning command clone you want to clone and the target file name  

# git clone <original repo> <distination dir> 

the active branch is the active branch when we cloned 

git branch it shows the active branch by default 

# git branch -a : shows the master branch then 

to switch to master : # git checkout master 

files and commit history is shown by # git log --oneline 

# cd ../filename/ : this moves the directory back and to the next 
                    filename specified 


# git clone <git url> : github repository gets cloned as a repository 
                        for use 


=======================================================================

